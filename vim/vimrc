" High level fixes
set noerrorbells
set nocompatible
set noswapfile
set hidden
filetype plugin indent on
syntax on
syntax enable

set exrc
set secure


" Special binds
set pastetoggle=<F2>
noremap - `
noremap ` -

" Vim splits
set splitbelow
set splitright
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>


" formatting
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set modelines=0
set backspace=indent,eol,start
set autoindent

autocmd FileType java setlocal ts=2 sts=2 sw=2
autocmd FileType javascript setlocal ts=2 sts=2 sw=2
autocmd FileType ts setlocal ts=2 sts=2 sw=2
autocmd FileType css setlocal ts=2 sts=2 sw=2
autocmd FileType htmldjango setlocal ts=2 sts=2 sw=2
autocmd FileType html setlocal ts=2 sts=2 sw=2
autocmd FileType cpp setlocal ts=2 sts=2 sw=2
autocmd FileType c setlocal ts=2 sts=2 sw=2
autocmd FileType python setlocal ts=4 sts=4 sw=4

" cmd and mode
set noshowcmd
set noshowmode
set shortmess+=F

" numbers and lines
set number relativenumber
set ruler
set wrap!

"read and writing
set encoding=UTF-8
set autowrite
set autoread
set ttyfast

" searching
set hlsearch
set incsearch
set ignorecase
set smartcase

"prefix used for file dir on mac vs linux
if has('macunix')
    let prefix='/Users/Michael'
else
    let prefix='/home/michael'
endif


" Vim airline
let g:loaded_airline = 1
set showmode
set showcmd

let g:airline_symbols = {}
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline_theme='nord'
let g:airline_powerline_fonts=1
let g:airline_extensions = []
let g:airline#extensions#ale#enabled = 0
let g:airline#extensions#tabline#show_splits = 1


" Color sceme
let g:material_terminal_italics = 1
let g:material_theme_style = 'default'

colorscheme material

"This breaks in urxvt!!
if has("termguicolors")
    set termguicolors
endif

highlight Normal guibg=NONE ctermbg=NONE guifg=NONE ctermfg=NONE
highlight StatusLine ctermbg=NONE guibg=NONE
highlight StatusLineNC ctermbg=NONE guibg=NONE
"highlight TabLineFill ctermfg=NONE ctermbg=NONE guibg=NONE guifg=NONE
"highlight TabLine ctermfg=NONE ctermbg=NONE guibg=NONE guifg=NONE
highlight LineNr ctermfg=NONE ctermbg=NONE guibg=NONE guifg=#ffbfee
"highlight SignColumn ctermfg=NONE ctermbg=NONE guibg=NONE guifg=#ffbfee
highlight VertSplit guibg=NONE guifg=NONE ctermbg=NONE ctermfg=NONE


"mu complete
"let g:mucomplete#enable_auto_at_startup = 0
"set completeopt=menu,menuone,preview,noselect,noinsert
"set shortmess=c
"
"" IDE like features for ALE
"let g:ale_completion_enabled = 1
"set omnifunc=ale#completion#OmniFunc
"let g:ale_sign_column_always = 1
"let g:ale_sign_error = 'X'
"let g:ale_sign_warning = '-'
"let g:ale_set_highlights = 0
"let g:ale_c_parse_makefile = 1
"if v:version >= 800
"  let g:ale_fix_on_save = 1
"  let g:ale_lint_on_enter = 1
"  let g:ale_echo_msg_format = '[%linter%] %s'
"  let g:ale_fixers = {'*': ['remove_trailing_lines', 'trim_whitespace']}
"  "javac classpath sucks
"  let g:ale_java_javac_classpath = prefix.'/Desktop/cs2420/java/jar_dir/components.jar:'.prefix.'/Desktop/cs2420/java/junit_dir/junit-4.12.jar:'.prefix.'/Desktop/cs2420/java/Assignment10-Pacman/src'
"  nnoremap <silent> K :ALEHover<CR>
"  nnoremap <silent> gd :ALEGoToDefinition<CR>
"  if v:version >= 801
"    set balloonevalterm
"    let g:ale_set_balloons = 1
"  endif
"endif
"highlight ALEErrorSign ctermbg=NONE ctermfg=red
"highlight ALEWarningSign ctermbg=NONE ctermfg=yellow guibg=NONE



"ctrl p
"let g:ctrlp_map='<leader>t'

"nerdtree
map <Leader>t :NERDTreeToggle<CR>
let NERDTreeMinimalUI = 1
let NERDTreeDirArrowExpandable = "\u00a0"
let NERDTreeDirArrowCollapsible = "\u00a0"
let NERDTreeNodeDelimiter = "\x07"
let NERDTreeWinSize = 25

" Vimux settings
let g:VimuxOrientation = "v"
let g:VimuxHeight = "20"
map <Leader>vb :VimuxRunCommand("clear;rspec " . buffname("%"))<CR>
map <Leader>vc :VimuxPromptCommand<CR>
map <Leader>\ :VimuxRunLastCommand<CR>
map <Leader>vx :VimuxCloseRunner<CR>


" COC
" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>


call plug#begin('~/.vim/plugged')
Plug 'preservim/nerdtree'
Plug 'dense-analysis/ale'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'pangloss/vim-javascript'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-airline/vim-airline-themes'
Plug 'ryanoasis/vim-devicons'
Plug 'preservim/vimux'
call plug#end()

" packloadall
" silent ! helptags ALL
